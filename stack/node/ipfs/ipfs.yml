version: '3.6'

services:
  ipfs:
    build:
      args:
      - DOCKER_BUILD_DIR=docker/ipfs
      - IPFS_VERSION=${IPFS_VERSION}
      context: ../..
      dockerfile: docker/ipfs/Dockerfile
    command: daemon --agent-version-suffix=${NODE_COMPOSE_PROJECT_NAME} --enable-gc --migrate
    container_name: ${NODE_COMPOSE_PROJECT_NAME}-ipfs
    cpus: 0.5
    environment:
    - IPFS_ADDRESSES_API=${NODE_IPFS_ADDRESSES_API:-}
    - IPFS_ADDRESSES_API_DOMAIN=${NODE_IPFS_ADDRESSES_API_DOMAIN:-}
    - IPFS_ADDRESSES_API_INET4=${NODE_IPFS_ADDRESSES_API_INET4:-}
    - IPFS_ADDRESSES_API_PORT=${NODE_IPFS_ADDRESSES_API_PORT:-}
    - IPFS_ADDRESSES_GATEWAY=${NODE_IPFS_ADDRESSES_GATEWAY:-}
    - IPFS_ADDRESSES_GATEWAY_DOMAIN=${NODE_IPFS_ADDRESSES_GATEWAY_DOMAIN:-}
    - IPFS_ADDRESSES_GATEWAY_INET4=${NODE_IPFS_ADDRESSES_GATEWAY_INET4:-}
    - IPFS_ADDRESSES_GATEWAY_PORT=${NODE_IPFS_ADDRESSES_GATEWAY_PORT:-}
    - IPFS_API_HTTPHEADERS=${NODE_IPFS_API_HTTPHEADERS:-}
    - IPFS_API_HTTPHEADERS_ACA_CREDENTIALS=${NODE_IPFS_API_HTTPHEADERS_ACA_CREDENTIALS:-}
    - IPFS_API_HTTPHEADERS_ACA_HEADERS=${NODE_IPFS_API_HTTPHEADERS_ACA_HEADERS:-}
    - IPFS_API_HTTPHEADERS_ACA_METHODS=${NODE_IPFS_API_HTTPHEADERS_ACA_METHODS:-}
    - IPFS_API_HTTPHEADERS_ACA_ORIGIN=${NODE_IPFS_API_HTTPHEADERS_ACA_ORIGIN:-}
    - IPFS_BOOTSTRAP=${NODE_IPFS_BOOTSTRAP:-}
    - IPFS_DATASTORE_GCPERIOD=${NODE_IPFS_DATASTORE_GCPERIOD:-}
    - IPFS_DISK_USAGE_PERCENT=${NODE_IPFS_DISK_USAGE_PERCENT:-}
    - IPFS_EXPERIMENTAL_ACCELERATEDDHTCLIENT=${NODE_IPFS_EXPERIMENTAL_ACCELERATEDDHTCLIENT:-}
    - IPFS_EXPERIMENTAL_FILESTOREENABLED=${NODE_IPFS_EXPERIMENTAL_FILESTOREENABLED:-}
    - IPFS_EXPERIMENTAL_GRAPHSYNCENABLED=${NODE_IPFS_EXPERIMENTAL_GRAPHSYNCENABLED:-}
    - IPFS_EXPERIMENTAL_LIBP2PSTREAMMOUNTING=${NODE_IPFS_EXPERIMENTAL_LIBP2PSTREAMMOUNTING:-}
    - IPFS_EXPERIMENTAL_P2PHTTPPROXY=${NODE_IPFS_EXPERIMENTAL_P2PHTTPPROXY:-}
    - IPFS_EXPERIMENTAL_STRATEGICPROVIDING=${NODE_IPFS_EXPERIMENTAL_STRATEGICPROVIDING:-}
    - IPFS_EXPERIMENTAL_URLSTOREENABLED=${NODE_IPFS_EXPERIMENTAL_URLSTOREENABLED:-}
    - IPFS_IPNS_REPUBLISHPERIOD=${NODE_IPFS_IPNS_REPUBLISHPERIOD:-}
    - IPFS_IPNS_RECORDLIFETIME=${NODE_IPFS_IPNS_RECORDLIFETIME:-}
    - IPFS_IPNS_USEPUBSUB=${NODE_IPFS_IPNS_USEPUBSUB:-}
    - IPFS_LOGGING=${NODE_IPFS_LOGGING:-}
    - IPFS_PROFILE=${IPFS_PROFILE:-}
    - IPFS_PUBSUB_ENABLE=${NODE_IPFS_PUBSUB_ENABLE:-}
    - IPFS_PUBSUB_ROUTER=${NODE_IPFS_PUBSUB_ROUTER:-}
    - IPFS_ROUTING_TYPE=${NODE_IPFS_ROUTING_TYPE:-}
    - IPFS_SWARM_CONNMGR_HIGHWATER=${NODE_IPFS_SWARM_CONNMGR_HIGHWATER:-}
    - IPFS_SWARM_CONNMGR_LOWWATER=${NODE_IPFS_SWARM_CONNMGR_LOWWATER:-}
    image: ${NODE_DOCKER_REPOSITORY}/ipfs:${DOCKER_IMAGE_TAG}
    labels:
    - SERVICE_4001_CHECK_TCP=true
    - SERVICE_4001_NAME=${NODE_COMPOSE_SERVICE_NAME}-ipfs:4001
    - SERVICE_5001_CHECK_TCP=true
    - SERVICE_5001_NAME=${NODE_COMPOSE_SERVICE_NAME}-ipfs:5001
    - SERVICE_8080_CHECK_HTTP=${NODE_IPFS_SERVICE_8080_CHECK_TCP}
    - SERVICE_8080_NAME=${NODE_COMPOSE_SERVICE_NAME}-ipfs:8080
    - SERVICE_8080_TAGS=${NODE_IPFS_SERVICE_8080_TAGS}
    - SERVICE_8081_IGNORE=true
    network_mode: host
    restart: always
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
    - ipfs:/data/ipfs:delegated

volumes:
  ipfs:

networks:
  public:
    external: true
    name: ${DOCKER_NETWORK_PUBLIC}
